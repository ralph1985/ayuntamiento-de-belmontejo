<button
  class="dark-mode-toggle"
  data-js="dark-mode-toggle"
  aria-label="dark mode toggle"
  aria-pressed="false"
>
  <svg
    class="c-moon"
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 480 480"
    style="enable-background:new 0 0 480 480"
    xml:space="preserve"
    ><path
      d="M459.782 347.328c-4.288-5.28-11.488-7.232-17.824-4.96-17.76 6.368-37.024 9.632-57.312 9.632-97.056 0-176-78.976-176-176 0-58.4 28.832-112.768 77.12-145.472 5.472-3.712 8.096-10.4 6.624-16.832S285.638 2.4 279.078 1.44C271.59.352 264.134 0 256.646 0c-132.352 0-240 107.648-240 240s107.648 240 240 240c84 0 160.416-42.688 204.352-114.176 3.552-5.792 3.04-13.184-1.216-18.496z"
    ></path></svg
  >
  <img
    class="c-sun"
    aria-hidden="true"
    src="/assets/icons/sun.svg"
    decoding="async"
    alt="moon"
    width="15"
    height="15"
  />
</button>

<script>
  // helper function to toggle aria-pressed
  function ariaPressed(element) {
    const isPressed = element.getAttribute('aria-pressed');
    element.setAttribute(
      'aria-pressed',
      isPressed === 'false' ? 'true' : 'false'
    );
  }

  // helper function to sync aria-pressed with current theme
  function syncAriaPressed(element) {
    const root = document.documentElement;
    const currentTheme = root.dataset.theme || 'light';
    element.setAttribute(
      'aria-pressed',
      currentTheme === 'dark' ? 'true' : 'false'
    );
  }

  // Creates the dark mode toggle event listener
  const setToggleListener = () => {
    const darkModeToggleButton = document.querySelector(
      '[data-js="dark-mode-toggle"]'
    );

    if (!darkModeToggleButton) return;

    // Sync initial state
    syncAriaPressed(darkModeToggleButton);

    const handleToggleClick = () => {
      const root = document.documentElement;
      const currentTheme = root.dataset.theme || 'light';
      const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
      root.dataset.theme = newTheme;
      ariaPressed(darkModeToggleButton);
      localStorage.setItem('theme', newTheme);
    };

    darkModeToggleButton?.addEventListener('click', handleToggleClick);
  };

  setToggleListener();

  document.addEventListener('astro:after-swap', setToggleListener); // For View Transitions purposes - astro:after-swap ensures that the listener is re-attached after navigating to a new page.
</script>
