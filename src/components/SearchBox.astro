---

---

<div class="search-container">
  <div class="search-input-wrapper">
    <input
      type="text"
      id="search-input"
      placeholder="Buscar en noticias y bandos..."
      class="search-input"
    />
    <button
      id="search-button"
      class="search-button"
      aria-label="Buscar"
    >
      <svg
        class="search-icon"
        viewBox="0 0 24 24"
        width="20"
        height="20"
      >
        <path
          fill="currentColor"
          d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"
        ></path>
      </svg>
    </button>
  </div>

  <div
    id="search-results"
    class="search-results"
    style="display: none;"
  >
    <div
      id="search-loading"
      class="search-loading"
      style="display: none;"
    >
      Buscando...
    </div>
    <div
      id="search-no-results"
      class="search-no-results"
      style="display: none;"
    >
      No se encontraron resultados
    </div>
    <div
      id="search-results-list"
      class="search-results-list"
    >
    </div>
  </div>
</div>

<style is:global>
  .search-container {
    position: relative;
    width: 100%;
    max-width: 500px;
    margin: 0 auto;
  }

  .search-input-wrapper {
    position: relative;
    display: flex;
    align-items: center;
    background: var(--background-main, #fff);
    border: 2px solid var(--border-color, #e0e0e0);
    border-radius: 25px;
    transition:
      border-color 0.3s ease,
      box-shadow 0.3s ease;
  }

  .search-input-wrapper:focus-within {
    border-color: var(--primary, #285c8d);
    box-shadow: 0 0 0 3px rgba(40, 92, 141, 0.1);
  }

  .search-input {
    flex: 1;
    padding: 12px 20px;
    border: none;
    background: transparent;
    font-size: 16px;
    outline: none;
    color: var(--text-primary, #2e2e2e);
  }

  .search-input::placeholder {
    color: var(--text-secondary, #6e6e6e);
  }

  .search-button {
    padding: 8px 16px;
    background: transparent;
    border: none;
    cursor: pointer;
    color: var(--text-secondary, #6e6e6e);
    transition: color 0.3s ease;
  }

  .search-button:hover {
    color: var(--primary, #285c8d);
  }

  .search-icon {
    display: block;
  }

  .search-results {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: var(--background-main, #fff);
    border: 1px solid var(--border-color, #e0e0e0);
    border-radius: 12px;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    max-height: 450px;
    overflow-y: auto;
    z-index: 1000;
    margin-top: 12px;
  }

  .search-loading,
  .search-no-results {
    padding: 32px 20px;
    text-align: center;
    color: var(--text-secondary, #6e6e6e);
    font-size: 14px;
    border-radius: 8px;
    margin: 16px;
    background: var(--background-sections, #f0e9e1);
  }

  .search-results-list {
    padding: 12px;
  }

  .search-result-item {
    padding: 16px 20px !important;
    margin: 8px 16px !important;
    border: 1px solid var(--border-color, #ddd6ce) !important;
    border-radius: 8px !important;
    cursor: pointer !important;
    transition: all 0.2s ease !important;
    background: var(--background-main, #fff) !important;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05) !important;
    display: block !important;
  }

  .search-result-item:hover {
    background-color: var(--background-sections, #f8f9fa) !important;
    border-color: var(--primary, #285c8d) !important;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1) !important;
    transform: translateY(-1px) !important;
  }

  .search-result-item:last-child {
    margin-bottom: 12px !important;
  }

  .search-result-title {
    font-weight: 600 !important;
    color: var(--text-primary, #2e2e2e) !important;
    margin-bottom: 8px !important;
    font-size: 16px !important;
    line-height: 1.3 !important;
  }

  .search-result-description {
    color: var(--text-secondary, #6e6e6e) !important;
    font-size: 14px !important;
    line-height: 1.5 !important;
    margin-bottom: 12px !important;
  }

  .search-result-meta {
    display: flex !important;
    align-items: center !important;
    gap: 16px !important;
    font-size: 12px !important;
    color: var(--text-secondary, #6e6e6e) !important;
    flex-wrap: wrap !important;
  }

  .search-result-type {
    background: var(--primary, #285c8d) !important;
    color: white !important;
    padding: 4px 12px !important;
    border-radius: 16px !important;
    text-transform: uppercase !important;
    font-weight: 600 !important;
    font-size: 11px !important;
    letter-spacing: 0.5px !important;
  }

  .search-result-type.bando {
    background: var(--accent, #b35030) !important;
  }

  .search-result-date {
    font-style: italic !important;
    color: var(--text-secondary, #6e6e6e) !important;
  }

  .search-result-author {
    color: var(--text-secondary, #6e6e6e) !important;
    font-weight: 500 !important;
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .search-container {
      margin: 0 16px;
    }

    .search-input {
      font-size: 16px; /* Prevents zoom on iOS */
    }

    .search-results {
      max-height: 300px;
    }
  }

  /* Mobile Narrow - 320px to 480px */
  @media (max-width: 480px) {
    .search-container {
      margin: 0 8px;
      max-width: 100%;
    }

    .search-input-wrapper {
      border-radius: 20px;
    }

    .search-input {
      padding: 10px 16px;
      font-size: 14px;
    }

    .search-button {
      padding: 6px 12px;
    }

    .search-results {
      max-height: 250px;
      margin-top: 8px;
      border-radius: 8px;
    }

    .search-results-list {
      padding: 8px;
    }

    .search-result-item {
      padding: 12px 16px !important;
      margin: 6px 8px !important;
      border-radius: 6px !important;
    }

    .search-result-title {
      font-size: 14px !important;
      margin-bottom: 6px !important;
    }

    .search-result-description {
      font-size: 12px !important;
      margin-bottom: 8px !important;
    }

    .search-result-meta {
      gap: 8px !important;
      font-size: 10px !important;
      flex-wrap: wrap !important;
    }

    .search-result-type {
      padding: 2px 8px !important;
      font-size: 9px !important;
      border-radius: 12px !important;
    }

    .search-loading,
    .search-no-results {
      padding: 24px 16px;
      margin: 12px 8px;
      font-size: 12px;
    }
  }
</style>

<script>
  // Tipos para TypeScript
  interface SearchItem {
    id: string;
    type: string;
    title: string;
    description: string;
    author: string;
    date: string;
    url: string;
    content: string;
    category?: string;
    tags: string[];
  }

  // Estado de la búsqueda
  let searchData: SearchItem[] = [];
  let isDataLoaded = false;

  // Elementos del DOM
  const searchInput = document.getElementById(
    "search-input"
  ) as HTMLInputElement;
  const searchButton = document.getElementById(
    "search-button"
  ) as HTMLButtonElement;
  const searchResults = document.getElementById(
    "search-results"
  ) as HTMLElement;
  const searchLoading = document.getElementById(
    "search-loading"
  ) as HTMLElement;
  const searchNoResults = document.getElementById(
    "search-no-results"
  ) as HTMLElement;
  const searchResultsList = document.getElementById(
    "search-results-list"
  ) as HTMLElement;

  // Cargar datos de búsqueda
  async function loadSearchData() {
    if (isDataLoaded) return;

    try {
      const response = await fetch("/api/search-data.json");
      if (!response.ok) throw new Error("Error al cargar datos de búsqueda");

      searchData = await response.json();
      isDataLoaded = true;
    } catch (error) {
      console.error("Error loading search data:", error);
    }
  }

  // Función de búsqueda
  function performSearch(query: string) {
    if (!query.trim()) {
      hideSearchResults();
      return;
    }

    const normalizedQuery = query.toLowerCase().trim();
    const searchTerms = normalizedQuery
      .split(" ")
      .filter((term) => term.length > 0);

    const results = searchData.filter((item) => {
      const searchableText = [
        item.title,
        item.description,
        item.content,
        item.author,
        ...(item.tags || []),
      ]
        .join(" ")
        .toLowerCase();

      // Buscar que todos los términos estén presentes
      return searchTerms.every((term) => searchableText.includes(term));
    });

    displaySearchResults(results, query);
  }

  // Mostrar resultados
  function displaySearchResults(results: SearchItem[], query: string) {
    searchResults.style.display = "block";
    searchLoading.style.display = "none";

    if (results.length === 0) {
      searchNoResults.style.display = "block";
      searchResultsList.innerHTML = "";
      return;
    }

    searchNoResults.style.display = "none";

    const resultsHTML = results
      .slice(0, 10)
      .map((item) => {
        const date = new Date(item.date).toLocaleDateString("es-ES", {
          year: "numeric",
          month: "long",
          day: "numeric",
        });

        // Resaltar términos de búsqueda en el título y descripción
        const highlightedTitle = highlightSearchTerms(item.title, query);
        const highlightedDescription = highlightSearchTerms(
          item.description.length > 150
            ? item.description.substring(0, 150) + "..."
            : item.description,
          query
        );

        return `<div class="search-result-item" onclick="window.location.href='${item.url}'">
          <div class="search-result-title">${highlightedTitle}</div>
          <div class="search-result-description">${highlightedDescription}</div>
          <div class="search-result-meta">
            <span class="search-result-type ${item.type}">${item.type}</span>
            <span class="search-result-date">${date}</span>
            <span class="search-result-author">${item.author}</span>
          </div>
        </div>`;
      })
      .join("");

    searchResultsList.innerHTML = resultsHTML;
  }

  // Resaltar términos de búsqueda
  function highlightSearchTerms(text: string, query: string): string {
    const searchTerms = query
      .toLowerCase()
      .trim()
      .split(" ")
      .filter((term) => term.length > 0);
    let highlightedText = text;

    searchTerms.forEach((term) => {
      const regex = new RegExp(`(${term})`, "gi");
      highlightedText = highlightedText.replace(regex, "<mark>$1</mark>");
    });

    return highlightedText;
  }

  // Ocultar resultados
  function hideSearchResults() {
    searchResults.style.display = "none";
  }

  // Event listeners
  let searchTimeout: ReturnType<typeof setTimeout>;

  searchInput.addEventListener("input", (e) => {
    clearTimeout(searchTimeout);
    const query = (e.target as HTMLInputElement).value;

    if (query.trim()) {
      searchLoading.style.display = "block";
      searchNoResults.style.display = "none";
      searchResultsList.innerHTML = "";
      searchResults.style.display = "block";

      searchTimeout = setTimeout(() => {
        performSearch(query);
      }, 300); // Debounce de 300ms
    } else {
      hideSearchResults();
    }
  });

  searchButton.addEventListener("click", () => {
    const query = searchInput.value;
    if (query.trim()) {
      performSearch(query);
    }
  });

  // Cerrar resultados cuando se hace clic fuera
  document.addEventListener("click", (e) => {
    if (
      !searchResults.contains(e.target as Node) &&
      !searchInput.contains(e.target as Node) &&
      !searchButton.contains(e.target as Node)
    ) {
      hideSearchResults();
    }
  });

  // Cargar datos cuando se enfoca el input
  searchInput.addEventListener("focus", loadSearchData);

  // Buscar con Enter
  searchInput.addEventListener("keydown", (e) => {
    if (e.key === "Enter") {
      e.preventDefault();
      const query = searchInput.value;
      if (query.trim()) {
        performSearch(query);
      }
    }
  });
</script>

<style is:global>
  mark {
    background-color: rgba(255, 235, 59, 0.3);
    color: inherit;
    padding: 1px 3px;
    border-radius: 3px;
    font-weight: 600;
  }
</style>
