<div class="search-container">
  <div class="search-input-wrapper">
    <input
      type="text"
      id="search-input"
      placeholder="Buscar en noticias y bandos..."
      class="search-input"
    />
    <button
      id="search-button"
      class="search-button"
      aria-label="Buscar"
    >
      <svg
        class="search-icon"
        viewBox="0 0 24 24"
        width="20"
        height="20"
      >
        <path
          fill="currentColor"
          d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"
        ></path>
      </svg>
    </button>
  </div>

  <div
    id="search-results"
    class="search-results"
    style="display: none;"
  >
    <div
      id="search-loading"
      class="search-loading"
      style="display: none;"
    >
      Buscando...
    </div>
    <div
      id="search-no-results"
      class="search-no-results"
      style="display: none;"
    >
      No se encontraron resultados
    </div>
    <div
      id="search-results-list"
      class="search-results-list"
    >
    </div>
  </div>
</div>

<style is:global>
  @import '../styles/components/search-box.less';
</style>

<script>
  // Tipos para TypeScript
  interface SearchItem {
    id: string;
    type: string;
    title: string;
    description: string;
    author: string;
    date: string;
    url: string;
    content: string;
    category?: string;
    tags: string[];
  }

  // Estado de la búsqueda
  let searchData: SearchItem[] = [];
  let isDataLoaded = false;

  // Funciones para persistir el estado de búsqueda
  function saveSearchState(query: string, results: SearchItem[]) {
    const state = {
      query,
      results,
      timestamp: Date.now(),
    };
    localStorage.setItem('searchState', JSON.stringify(state));
  }

  function loadSearchState() {
    try {
      const saved = localStorage.getItem('searchState');
      if (!saved) return null;

      const state = JSON.parse(saved);
      // Validar que el estado no sea muy antiguo (más de 1 hora)
      if (Date.now() - state.timestamp > 3600000) {
        localStorage.removeItem('searchState');
        return null;
      }

      return state;
    } catch (error) {
      // eslint-disable-next-line no-console
      console.error('Error loading search state:', error);
      return null;
    }
  }

  function clearSearchState() {
    localStorage.removeItem('searchState');
  }

  // Elementos del DOM
  const searchInput = document.getElementById(
    'search-input'
  ) as HTMLInputElement;
  const searchButton = document.getElementById(
    'search-button'
  ) as HTMLButtonElement;
  const searchResults = document.getElementById(
    'search-results'
  ) as HTMLElement;
  const searchLoading = document.getElementById(
    'search-loading'
  ) as HTMLElement;
  const searchNoResults = document.getElementById(
    'search-no-results'
  ) as HTMLElement;
  const searchResultsList = document.getElementById(
    'search-results-list'
  ) as HTMLElement;

  // Cargar datos de búsqueda
  async function loadSearchData() {
    if (isDataLoaded) return;

    try {
      const response = await fetch('/api/search-data.json');
      if (!response.ok) throw new Error('Error al cargar datos de búsqueda');

      searchData = await response.json();
      isDataLoaded = true;
    } catch (error) {
      // eslint-disable-next-line no-console
      console.error('Error loading search data:', error);
    }
  }

  // Función de búsqueda
  function performSearch(query: string) {
    if (!query.trim()) {
      hideSearchResults();
      return;
    }

    const normalizedQuery = query.toLowerCase().trim();
    const searchTerms = normalizedQuery
      .split(' ')
      .filter(term => term.length > 0);

    const results = searchData.filter(item => {
      const searchableText = [
        item.title,
        item.description,
        item.content,
        item.author,
        ...(item.tags || []),
      ]
        .join(' ')
        .toLowerCase();

      // Buscar que todos los términos estén presentes
      return searchTerms.every(term => searchableText.includes(term));
    });

    displaySearchResults(results, query);
  }

  // Mostrar resultados
  function displaySearchResults(results: SearchItem[], query: string) {
    searchResults.style.display = 'block';
    searchLoading.style.display = 'none';

    // Guardar el estado de búsqueda
    saveSearchState(query, results);

    if (results.length === 0) {
      searchNoResults.style.display = 'block';
      searchResultsList.innerHTML = '';
      return;
    }

    searchNoResults.style.display = 'none';

    const resultsHTML = results
      .slice(0, 10)
      .map(item => {
        const date = new Date(item.date).toLocaleDateString('es-ES', {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
        });

        // Resaltar términos de búsqueda en el título y descripción
        const highlightedTitle = highlightSearchTerms(item.title, query);
        const highlightedDescription = highlightSearchTerms(
          item.description.length > 150
            ? item.description.substring(0, 150) + '...'
            : item.description,
          query
        );

        return `<div class="search-result-item" onclick="window.location.href='${item.url}'">
          <div class="search-result-title">${highlightedTitle}</div>
          <div class="search-result-description">${highlightedDescription}</div>
          <div class="search-result-meta">
            <span class="search-result-type ${item.type}">${item.type}</span>
            <span class="search-result-date">${date}</span>
            <span class="search-result-author">${item.author}</span>
          </div>
        </div>`;
      })
      .join('');

    searchResultsList.innerHTML = resultsHTML;
  }

  // Resaltar términos de búsqueda
  function highlightSearchTerms(text: string, query: string): string {
    const searchTerms = query
      .toLowerCase()
      .trim()
      .split(' ')
      .filter(term => term.length > 0);
    let highlightedText = text;

    searchTerms.forEach(term => {
      const regex = new RegExp(`(${term})`, 'gi');
      highlightedText = highlightedText.replace(regex, '<mark>$1</mark>');
    });

    return highlightedText;
  }

  // Ocultar resultados solo cuando el input está vacío
  function hideSearchResults() {
    if (!searchInput.value.trim()) {
      searchResults.style.display = 'none';
    }
  }

  // Event listeners
  let searchTimeout: ReturnType<typeof setTimeout>;

  searchInput.addEventListener('input', e => {
    clearTimeout(searchTimeout);
    const query = (e.target as HTMLInputElement).value;

    if (query.trim()) {
      searchLoading.style.display = 'block';
      searchNoResults.style.display = 'none';
      searchResultsList.innerHTML = '';
      searchResults.style.display = 'block';

      searchTimeout = setTimeout(() => {
        performSearch(query);
      }, 300); // Debounce de 300ms
    } else {
      hideSearchResults();
      clearSearchState(); // Limpiar estado cuando el input está vacío
    }
  });

  searchButton.addEventListener('click', () => {
    const query = searchInput.value;
    if (query.trim()) {
      performSearch(query);
    }
  });

  // Cerrar resultados cuando se hace clic fuera - Deshabilitado para resultados fijos
  // document.addEventListener("click", (e) => {
  //   if (
  //     !searchResults.contains(e.target as Node) &&
  //     !searchInput.contains(e.target as Node) &&
  //     !searchButton.contains(e.target as Node)
  //   ) {
  //     hideSearchResults();
  //   }
  // });

  // Cargar datos cuando se enfoca el input
  searchInput.addEventListener('focus', loadSearchData);

  // Buscar con Enter
  searchInput.addEventListener('keydown', e => {
    if (e.key === 'Enter') {
      e.preventDefault();
      const query = searchInput.value;
      if (query.trim()) {
        performSearch(query);
      }
    }
  });

  // Inicialización: restaurar estado previo si existe
  function initializeSearch() {
    const savedState = loadSearchState();
    if (savedState && savedState.query && savedState.results) {
      searchInput.value = savedState.query;
      displaySearchResults(savedState.results, savedState.query);
    }
  }

  // Inicializar cuando se carga la página
  document.addEventListener('DOMContentLoaded', () => {
    loadSearchData().then(() => {
      initializeSearch();
    });
  });

  // Si ya está cargado el DOM, inicializar inmediatamente
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      loadSearchData().then(() => {
        initializeSearch();
      });
    });
  } else {
    loadSearchData().then(() => {
      initializeSearch();
    });
  }
</script>

<style is:global>
  mark {
    background-color: rgba(255, 235, 59, 0.3);
    color: inherit;
    padding: 1px 3px;
    border-radius: 3px;
    font-weight: 600;
  }
</style>
