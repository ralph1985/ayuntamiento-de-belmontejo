---
import '@styles/sidebar.less';

interface Heading {
  depth: number; // The heading level (h1 = 1, h2 = 2, etc)
  slug: string; // The ID of the heading for linking
  text: string; // The text content of the heading
}

interface Props {
  headings: Heading[]; // Array of headings from your markdown content
  levels?: 1 | 2 | 3; // How many levels of headers to show in TOC (default: 2)
}

const { headings, levels = 2 } = Astro.props as Props;

// Filter headings to only show up to the specified level
const filteredHeadings = headings.filter(heading => heading.depth <= levels);
---

{
  filteredHeadings.length > 0 && (
    <div
      class="news-sidebar_widget-wrapper cs-hide-on-mobile"
      id="desktop-toc"
    >
      <h3 class="news-sidebar_widget-header">En esta p√°gina</h3>
      <ul class="cs-toc-list">
        {filteredHeadings.map(heading => (
          <li class={`cs-toc-item depth-${heading.depth}`}>
            <a
              href={`#${heading.slug}`}
              class="cs-toc-link"
            >
              {heading.text}
            </a>
          </li>
        ))}
      </ul>
    </div>
  )
}

<style lang="less">
  @import '../../styles/components/table-of-contents.less';
</style>

<script>
  // Wrapper for News post content
  let wrappingElement: Element | null;
  let observeHeaderTags: IntersectionObserver;
  let allHeaderTags: Element[];
  const isDesktop = window.matchMedia('(min-width: 1024px)').matches;

  // Function that runs when the Intersection Observer fires
  function setCurrent(entries: IntersectionObserverEntry[]) {
    const tocWrapper = document.querySelector('#desktop-toc');
    if (!tocWrapper) return;

    const allSectionLinks = tocWrapper.querySelectorAll('.cs-toc-link');

    entries.forEach((entry: IntersectionObserverEntry) => {
      if (entry.isIntersecting) {
        allSectionLinks.forEach(link =>
          link.classList.remove('cs-toc-current')
        );
        const targetLink = tocWrapper.querySelector(
          `a[href="#${entry.target.id}"].cs-toc-link`
        );
        if (targetLink) targetLink.classList.add('cs-toc-current');
      }
    });
  }

  function initTOC() {
    // Check if it's desktop
    if (!window.matchMedia('(min-width: 64rem)').matches) return;

    // update this with whatever class wraps your blog post content
    wrappingElement = document.querySelector('#news-content');
    if (!wrappingElement) return;

    // Get all H1/H2/H3 tags from the post
    allHeaderTags = Array.from(
      wrappingElement.querySelectorAll(':scope > h1, :scope > h2, :scope > h3')
    );
    if (!allHeaderTags.length) return;

    // Intersection Observer Options
    const options = {
      root: null,
      rootMargin: '0px 0px -50% 0px',
      threshold: [1],
    };

    // Create Observer
    observeHeaderTags = new IntersectionObserver(setCurrent, options);
    allHeaderTags.forEach(tag => observeHeaderTags.observe(tag));
  }

  // Run on initial page load if on desktop
  if (isDesktop) initTOC();

  // Re-run on view transitions navigation if on desktop
  document.addEventListener('astro:after-swap', () => {
    if (window.matchMedia('(min-width: 64rem)').matches) {
      initTOC();
    }
  });

  // Listen for screen size changes
  window.matchMedia('(min-width: 64rem)').addEventListener('change', e => {
    if (e.matches) {
      initTOC();
    } else {
      // Clean up observer when switching to mobile
      if (observeHeaderTags) observeHeaderTags.disconnect();
    }
  });
</script>
