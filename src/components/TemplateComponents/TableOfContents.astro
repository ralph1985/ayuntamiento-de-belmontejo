---
import '@styles/sidebar.less';

interface Heading {
  depth: number; // The heading level (h1 = 1, h2 = 2, etc)
  slug: string; // The ID of the heading for linking
  text: string; // The text content of the heading
}

interface Props {
  headings: Heading[]; // Array of headings from your markdown content
  levels?: 1 | 2 | 3; // How many levels of headers to show in TOC (default: 2)
  hideOnMobile?: boolean; // Whether to hide on mobile (default: true for desktop version)
  noWrapper?: boolean; // Whether to skip the outer wrapper (default: false)
}

const {
  headings,
  levels = 2,
  hideOnMobile = true,
  noWrapper = false,
} = Astro.props as Props;

// Filter headings to only show up to the specified level
const filteredHeadings = headings.filter(heading => heading.depth <= levels);
---

{
  filteredHeadings.length > 0 &&
    (noWrapper ? (
      <Fragment>
        <h3 class="news-sidebar_widget-header">En esta página</h3>
        <ul class="cs-toc-list" data-toc-wrapper>
          {filteredHeadings.map(heading => (
            <li class={`cs-toc-item depth-${heading.depth}`}>
              <a href={`#${heading.slug}`} class="cs-toc-link">
                {heading.text}
              </a>
            </li>
          ))}
        </ul>
      </Fragment>
    ) : (
      <div
        class={`news-sidebar_widget-wrapper ${hideOnMobile ? 'cs-hide-on-mobile' : ''}`}
        data-toc-wrapper
      >
        <h3 class="news-sidebar_widget-header">En esta página</h3>
        <ul class="cs-toc-list">
          {filteredHeadings.map(heading => (
            <li class={`cs-toc-item depth-${heading.depth}`}>
              <a href={`#${heading.slug}`} class="cs-toc-link">
                {heading.text}
              </a>
            </li>
          ))}
        </ul>
      </div>
    ))
}

<style lang="less">
  @import '../../styles/components/table-of-contents.less';
</style>

<script>
  // Wrapper for News post content
  let wrappingElement: Element | null;
  let observeHeaderTags: IntersectionObserver;
  let allHeaderTags: Element[];

  // Function that runs when the Intersection Observer fires
  function setCurrent(entries: IntersectionObserverEntry[]) {
    // Get the currently visible TOC wrapper (could be mobile or desktop)
    const tocWrapper = document.querySelector(
      '[data-toc-wrapper]:not([style*="display: none"])'
    );
    if (!tocWrapper) return;

    const allSectionLinks = tocWrapper.querySelectorAll('.cs-toc-link');

    entries.forEach((entry: IntersectionObserverEntry) => {
      if (entry.isIntersecting) {
        allSectionLinks.forEach(link =>
          link.classList.remove('cs-toc-current')
        );
        const targetLink = tocWrapper.querySelector(
          `a[href="#${entry.target.id}"].cs-toc-link`
        );
        if (targetLink) targetLink.classList.add('cs-toc-current');
      }
    });
  }

  function initTOC() {
    // update this with whatever class wraps your blog post content
    wrappingElement = document.querySelector('#news-content');
    if (!wrappingElement) return;

    // Get all H1/H2/H3 tags from the post
    allHeaderTags = Array.from(
      wrappingElement.querySelectorAll(':scope > h1, :scope > h2, :scope > h3')
    );
    if (!allHeaderTags.length) return;

    // Intersection Observer Options
    const options = {
      root: null,
      rootMargin: '0px 0px -50% 0px',
      threshold: [1],
    };

    // Create Observer
    observeHeaderTags = new IntersectionObserver(setCurrent, options);
    allHeaderTags.forEach(tag => observeHeaderTags.observe(tag));
  }

  // Run on initial page load
  initTOC();

  // Re-run on view transitions navigation
  document.addEventListener('astro:after-swap', () => {
    initTOC();
  });
</script>
