---
import { useTranslations } from 'src/i18n';

const locale = Astro.currentLocale;
const t = useTranslations(locale);
---

<div id="cookie-banner" class="cookie-banner" style="display: none;">
  <div class="cookie-banner-content">
    <div class="cookie-banner-text">
      <h3>{t.cookies.title}</h3>
      <p>{t.cookies.text}</p>
      <p class="cookie-banner-link">
        <a href="/politica-de-cookies" target="_blank">{t.cookies.link}</a>
      </p>
    </div>
    <div class="cookie-banner-buttons">
      <button id="accept-all-cookies" class="cookie-btn cookie-btn-accept">
        {t.cookies.acceptAll}
      </button>
      <button
        id="accept-necessary-only"
        class="cookie-btn cookie-btn-necessary"
      >
        {t.cookies.acceptNecessary}
      </button>
      <button id="cookie-settings" class="cookie-btn cookie-btn-settings">
        {t.cookies.settings}
      </button>
    </div>
  </div>
</div>

<!-- Cookie Settings Modal -->
<div id="cookie-settings-modal" class="cookie-modal" style="display: none;">
  <div class="cookie-modal-content">
    <div class="cookie-modal-header">
      <h3>{t.cookies.settingsTitle}</h3>
      <button id="close-cookie-modal" class="cookie-modal-close">&times;</button
      >
    </div>
    <div class="cookie-modal-body">
      <div class="cookie-category">
        <div class="cookie-category-header">
          <input type="checkbox" id="necessary-cookies" checked disabled />
          <label for="necessary-cookies">
            <strong>{t.cookies.necessaryTitle}</strong>
          </label>
        </div>
        <p class="cookie-category-description">{t.cookies.necessaryText}</p>
      </div>

      <div class="cookie-category">
        <div class="cookie-category-header">
          <input type="checkbox" id="analytics-cookies" />
          <label for="analytics-cookies">
            <strong>{t.cookies.analyticsTitle}</strong>
          </label>
        </div>
        <p class="cookie-category-description">{t.cookies.analyticsText}</p>
      </div>
    </div>
    <div class="cookie-modal-footer">
      <button id="save-cookie-preferences" class="cookie-btn cookie-btn-accept">
        {t.cookies.save}
      </button>
    </div>
  </div>
</div>

<script is:inline>
  // Cookie consent management
  (function () {
    const COOKIE_CONSENT_KEY = 'cookie-consent';
    const ANALYTICS_CONSENT_KEY = 'analytics-consent';

    // Initialize cookie banner
    function initCookieBanner() {
      const consent = localStorage.getItem(COOKIE_CONSENT_KEY);

      if (!consent) {
        showCookieBanner();
      } else {
        // If user has already made a choice, apply it
        const analyticsConsent =
          localStorage.getItem(ANALYTICS_CONSENT_KEY) === 'true';
        if (analyticsConsent && window.gtag) {
          // Analytics already loaded, no need to do anything
        }
      }
    }

    function showCookieBanner() {
      const banner = document.getElementById('cookie-banner');
      if (banner) {
        banner.style.display = 'block';
      }
    }

    function hideCookieBanner() {
      const banner = document.getElementById('cookie-banner');
      if (banner) {
        banner.style.display = 'none';
      }
    }

    function showCookieModal() {
      const modal = document.getElementById('cookie-settings-modal');
      if (modal) {
        modal.style.display = 'flex';
        // Set current preferences
        const analyticsConsent =
          localStorage.getItem(ANALYTICS_CONSENT_KEY) === 'true';
        const analyticsCheckbox = document.getElementById('analytics-cookies');
        if (analyticsCheckbox) {
          analyticsCheckbox.checked = analyticsConsent;
        }
      }
    }

    function hideCookieModal() {
      const modal = document.getElementById('cookie-settings-modal');
      if (modal) {
        modal.style.display = 'none';
      }
    }

    function setConsentAndReload(analyticsConsent) {
      localStorage.setItem(COOKIE_CONSENT_KEY, 'true');
      localStorage.setItem(ANALYTICS_CONSENT_KEY, analyticsConsent.toString());

      // Show floating cookie manager button after consent is given
      showFloatingCookieManager();

      // Reload page to apply consent changes
      window.location.reload();
    }

    function showFloatingCookieManager() {
      const floatingBtn = document.getElementById('floating-cookie-manager');
      if (floatingBtn) {
        floatingBtn.style.display = 'block';
      }
    }

    // Event listeners
    document.addEventListener('DOMContentLoaded', function () {
      initCookieBanner();

      // Accept all cookies
      const acceptAllBtn = document.getElementById('accept-all-cookies');
      if (acceptAllBtn) {
        acceptAllBtn.addEventListener('click', function () {
          setConsentAndReload(true);
        });
      }

      // Accept only necessary cookies
      const acceptNecessaryBtn = document.getElementById(
        'accept-necessary-only'
      );
      if (acceptNecessaryBtn) {
        acceptNecessaryBtn.addEventListener('click', function () {
          setConsentAndReload(false);
        });
      }

      // Show cookie settings
      const settingsBtn = document.getElementById('cookie-settings');
      if (settingsBtn) {
        settingsBtn.addEventListener('click', function () {
          showCookieModal();
        });
      }

      // Close modal
      const closeModalBtn = document.getElementById('close-cookie-modal');
      if (closeModalBtn) {
        closeModalBtn.addEventListener('click', function () {
          hideCookieModal();
        });
      }

      // Save preferences
      const savePreferencesBtn = document.getElementById(
        'save-cookie-preferences'
      );
      if (savePreferencesBtn) {
        savePreferencesBtn.addEventListener('click', function () {
          const analyticsCheckbox =
            document.getElementById('analytics-cookies');
          const analyticsConsent = analyticsCheckbox
            ? analyticsCheckbox.checked
            : false;
          hideCookieModal();
          hideCookieBanner();
          setConsentAndReload(analyticsConsent);
        });
      }

      // Close modal when clicking outside
      const modal = document.getElementById('cookie-settings-modal');
      if (modal) {
        modal.addEventListener('click', function (e) {
          if (e.target === modal) {
            hideCookieModal();
          }
        });
      }
    });

    // Function to check if analytics consent is given (used by Google Analytics component)
    window.hasAnalyticsConsent = function () {
      return localStorage.getItem(ANALYTICS_CONSENT_KEY) === 'true';
    };
  })();
</script>

<style>
  .cookie-banner {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    background: #2c3e50;
    color: white;
    padding: 1rem;
    box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.3);
    z-index: 9999;
    font-family:
      -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  }

  .cookie-banner-content {
    max-width: 1200px;
    margin: 0 auto;
    display: flex;
    align-items: center;
    gap: 2rem;
    flex-wrap: wrap;
  }

  .cookie-banner-text {
    flex: 1;
    min-width: 300px;
  }

  .cookie-banner-text h3 {
    margin: 0 0 0.5rem 0;
    font-size: 1.1rem;
  }

  .cookie-banner-text p {
    margin: 0.5rem 0;
    font-size: 0.9rem;
    line-height: 1.4;
  }

  .cookie-banner-link a {
    color: #3498db;
    text-decoration: underline;
  }

  .cookie-banner-buttons {
    display: flex;
    gap: 0.75rem;
    flex-wrap: wrap;
  }

  .cookie-btn {
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.9rem;
    font-weight: 500;
    transition: all 0.3s ease;
    white-space: nowrap;
  }

  .cookie-btn-accept {
    background: #27ae60;
    color: white;
  }

  .cookie-btn-accept:hover {
    background: #229954;
  }

  .cookie-btn-necessary {
    background: #95a5a6;
    color: white;
  }

  .cookie-btn-necessary:hover {
    background: #7f8c8d;
  }

  .cookie-btn-settings {
    background: transparent;
    color: white;
    border: 1px solid #bdc3c7;
  }

  .cookie-btn-settings:hover {
    background: #34495e;
  }

  /* Modal styles */
  .cookie-modal {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 10000;
    padding: 1rem;
  }

  .cookie-modal-content {
    background: white;
    border-radius: 8px;
    max-width: 600px;
    width: 100%;
    max-height: 80vh;
    overflow-y: auto;
    color: #2c3e50;
  }

  .cookie-modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem;
    border-bottom: 1px solid #ecf0f1;
  }

  .cookie-modal-header h3 {
    margin: 0;
    font-size: 1.25rem;
  }

  .cookie-modal-close {
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: #7f8c8d;
    padding: 0;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .cookie-modal-close:hover {
    color: #2c3e50;
  }

  .cookie-modal-body {
    padding: 1.5rem;
  }

  .cookie-category {
    margin-bottom: 2rem;
  }

  .cookie-category:last-child {
    margin-bottom: 0;
  }

  .cookie-category-header {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 0.5rem;
  }

  .cookie-category-header input[type='checkbox'] {
    width: 18px;
    height: 18px;
  }

  .cookie-category-header label {
    margin: 0;
    cursor: pointer;
  }

  .cookie-category-description {
    margin: 0;
    font-size: 0.9rem;
    line-height: 1.4;
    color: #7f8c8d;
    margin-left: 2.25rem;
  }

  .cookie-modal-footer {
    padding: 1.5rem;
    border-top: 1px solid #ecf0f1;
    text-align: right;
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .cookie-banner-content {
      flex-direction: column;
      align-items: stretch;
      gap: 1rem;
    }

    .cookie-banner-buttons {
      justify-content: stretch;
    }

    .cookie-btn {
      flex: 1;
      text-align: center;
    }

    .cookie-modal {
      padding: 0.5rem;
    }

    .cookie-category-description {
      margin-left: 0;
      margin-top: 0.5rem;
    }
  }
</style>
