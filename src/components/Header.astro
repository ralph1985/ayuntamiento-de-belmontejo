---
import { getRelativeLocaleUrl } from 'astro:i18n';
import { Icon } from 'astro-icon/components';
import DarkModeToggle from '@components/DarkModeToggle.astro';
import { useTranslations } from 'src/i18n';

import navDataEs from '@data/navData.es.json';
import navDataEn from '@data/navData.en.json';

const locale = Astro.currentLocale;
const t = useTranslations(locale);

const navData = locale === 'en' ? navDataEn : navDataEs;

// Filter navigation data to show admin menu only when enabled
const showAdminMenu = import.meta.env.PUBLIC_ADMIN_MENU === 'true';
const filteredNavData = navData.filter(entry => {
  if (entry.isAdmin) {
    return showAdminMenu;
  }
  return true;
});
---

<!-- ============================================ --><!--                 Navigation                   --><!-- ============================================ -->
<header id="cs-navigation">
  <div class="cs-container">
    <!--Nav Logo-->
    <a href="/" class="cs-logo" aria-label="back to home">
      <img
        src="/assets/images/escudo.png"
        alt="Escudo de Belmontejo"
        width="210"
        height="29"
        decoding="async"
      />
      <span class="cs-logo-text">{t.header.title}</span>
    </a>
    <!--Navigation List-->
    <nav class="cs-nav" role="navigation">
      <!--Mobile Nav Toggle-->
      <button
        class="cs-toggle"
        id="mobile-menu-toggle"
        aria-expanded="false"
        aria-controls="cs-expanded-ul"
        aria-label="Toggle mobile menu."
      >
        <div class="cs-box" aria-hidden="true">
          <span class="cs-line cs-line1" aria-hidden="true"></span>
          <span class="cs-line cs-line2" aria-hidden="true"></span>
          <span class="cs-line cs-line3" aria-hidden="true"></span>
        </div>
      </button>
      <!-- If you want to use another navigation stitch and enjoy the benefits of dynamic routing, replace the .cs-ul-wrapper in the navigation stitch with this one below -->
      <div class="cs-ul-wrapper">
        <ul id="cs-expanded-ul" class="cs-ul">
          {
            filteredNavData.map(entry => (
              <li
                class:list={[
                  'cs-li',
                  { 'cs-dropdown': entry.children?.length > 0 },
                ]}
              >
                {entry.children?.length > 0 ? (
                  // If entry has children in navData.json, create a button and a dropdown icon
                  <button
                    aria-expanded="false"
                    aria-controls={`submenu-${entry.key}`}
                    class:list={[
                      'cs-li-link cs-dropdown-button',
                      { 'cs-active': Astro.url.pathname.includes(entry.url) },
                    ]}
                  >
                    {entry.key}
                    <Icon name="mdi--caret" class="cs-drop-icon" />
                  </button>
                ) : (
                  // If entry does not have children in navData.json, create an anchor
                  <a
                    href={entry.url}
                    class:list={[
                      'cs-li-link',
                      { 'cs-active': Astro.url.pathname === entry.url },
                    ]}
                    aria-current={
                      Astro.url.pathname === entry.url ? 'page' : undefined
                    }
                    target={entry.isAdmin ? '_blank' : undefined}
                    rel={entry.isAdmin ? 'noopener noreferrer' : undefined}
                  >
                    {entry.key}
                  </a>
                )}

                {entry.children?.length > 0 && (
                  // If entry has children in navData.json, create a drop down menu
                  <ul id={`submenu-${entry.key}`} class="cs-drop-ul">
                    {entry.children.map(child => (
                      <li class="cs-drop-li">
                        <a
                          href={child.url}
                          class="cs-li-link cs-drop-link"
                          aria-current={
                            Astro.url.pathname === child.url
                              ? 'page'
                              : undefined
                          }
                        >
                          {child.key}
                        </a>
                      </li>
                    ))}
                  </ul>
                )}
              </li>
            ))
          }
        </ul>
      </div>
    </nav>
    <div class="cs-header-actions">
      <!-- Lang Switcher -->
      <div class="cs-lang-switcher">
        <a href={getRelativeLocaleUrl('es')} class:list={["cs-lang-link", { "cs-active": locale === 'es' }]}>ES</a>
        <a href={getRelativeLocaleUrl('en')} class:list={["cs-lang-link", { "cs-active": locale === 'en' }]}>EN</a>
      </div>
      <!--Dark Mode toggle: remove component if you don't want to enable a dark mode toggle-->
      <DarkModeToggle />
    </div>
  </div>
</header>

<style lang="less">
  @import '../styles/components/header.less';
</style>
